// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  EMPLOYEE
  ADMIN
}

enum ReimbursementStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExpenseCategory {
  TRAVEL
  MEALS
  OFFICE_SUPPLIES
  EQUIPMENT
  OTHER
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  password              String
  firstName             String?
  lastName              String?
  role                  UserRole  @default(EMPLOYEE)
  company               String?
  isEmailVerified       Boolean   @default(false)
  verificationToken     String?   @unique
  verificationTokenExpiry DateTime?
  resetPasswordToken    String?   @unique
  resetPasswordExpiry   DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  submittedRequests     ReimbursementRequest[] @relation("SubmittedRequests")
  approvedRequests      ReimbursementRequest[] @relation("ApprovedRequests")
}

model ReimbursementRequest {
  id              String              @id @default(cuid())
  amount          Float
  category        ExpenseCategory
  description     String
  receiptUrl      String
  status          ReimbursementStatus @default(PENDING)
  feedback        String?
  submittedAt     DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  submittedBy     User               @relation("SubmittedRequests", fields: [submittedById], references: [id])
  submittedById   String
  approvedBy      User?              @relation("ApprovedRequests", fields: [approvedById], references: [id])
  approvedById    String?
  approvedAt      DateTime?
}
